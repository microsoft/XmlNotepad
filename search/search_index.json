{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"XML Notepad # XML Notepad provides a simple intuitive User Interface for browsing and editing XML documents. XML Notepad is the result of a promise Chris Lovett made to a friend at Microsoft. The original XML Notepad shipped in back in 1998, written by Murray Low in C++. Later on it fell behind in support for XML standards and, because we didn't have time to fix it, we pulled the downloader. But Murray apparently did such a nice job that MSDN was inundated with requests to put the app back up, so they asked for a replacement. Chris was working on System.Xml in C# in 1999, so he figured he could crank out a replacement using the .NET Framework pretty quickly. Well, the problem was it was one of those side projects on his \"one-day\" list \u2014 you know how that goes! Fortunately, another good friend, Michael Corning, took interest in it, helped hold his feet to the fire, and also added some cool features himself. Dan Doris also took pity on Chris and helped identify some great bugs. So here we are, a nifty tool that should be useful to those who want a quick way to view and edit XML documents. There have been over 6 million downloads since then - thanks to everyone who tried it out! Handy features include: # Ability to load .csv, .json, and .htm files, converting them to XML. Tree View synchronized with Node Text View for quick editing of node names and values. Incremental search (Ctrl+I) in both tree and text views, so as you type, it navigates to matching nodes. Cut/copy/paste with full namespace support. Drag/drop support for easy manipulation of the tree, even across different instances of XML Notepad and from the file system. Infinite undo/redo for all edit operations. In-place popup multi-line editing of large text node values. Configurable fonts and colors via the options dialog . Full find/replace dialog with support for regex and XPath. Good performance on large XML documents, loading a 3mb document in about one second. Instant XML schema validation while you edit, with errors and warnings shown in the task list window. Intellisense based on expected elements, attributes, and enumerated simple type values. Support for custom editors for date, dateTime, and time datatypes, and other types like color. Handy nudge toolbar buttons for quick movement of nodes up and down the tree. In-place HTML viewer for processing <?xml-stylesheet instructions. Built-in XML Diff tool. Support for XInclude. Handy \"XML statistics\" tool to summarize info about your XML documents. Dynamic help from XSD annotations. Goto definition to navigate includes and XSD schema information. Generate XML document from XSD Schema . Vibrant community with many updates and bug fixes . Go to the installer page . The source code is available at https://github.com/microsoft/XmlNotepad . Please provide feedback or any issues you have using the XML Notepad GitHub issues list. See development information on how to build XML Notepad from source. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"Home"},{"location":"#xml-notepad","text":"XML Notepad provides a simple intuitive User Interface for browsing and editing XML documents. XML Notepad is the result of a promise Chris Lovett made to a friend at Microsoft. The original XML Notepad shipped in back in 1998, written by Murray Low in C++. Later on it fell behind in support for XML standards and, because we didn't have time to fix it, we pulled the downloader. But Murray apparently did such a nice job that MSDN was inundated with requests to put the app back up, so they asked for a replacement. Chris was working on System.Xml in C# in 1999, so he figured he could crank out a replacement using the .NET Framework pretty quickly. Well, the problem was it was one of those side projects on his \"one-day\" list \u2014 you know how that goes! Fortunately, another good friend, Michael Corning, took interest in it, helped hold his feet to the fire, and also added some cool features himself. Dan Doris also took pity on Chris and helped identify some great bugs. So here we are, a nifty tool that should be useful to those who want a quick way to view and edit XML documents. There have been over 6 million downloads since then - thanks to everyone who tried it out!","title":"XML Notepad"},{"location":"#handy-features-include","text":"Ability to load .csv, .json, and .htm files, converting them to XML. Tree View synchronized with Node Text View for quick editing of node names and values. Incremental search (Ctrl+I) in both tree and text views, so as you type, it navigates to matching nodes. Cut/copy/paste with full namespace support. Drag/drop support for easy manipulation of the tree, even across different instances of XML Notepad and from the file system. Infinite undo/redo for all edit operations. In-place popup multi-line editing of large text node values. Configurable fonts and colors via the options dialog . Full find/replace dialog with support for regex and XPath. Good performance on large XML documents, loading a 3mb document in about one second. Instant XML schema validation while you edit, with errors and warnings shown in the task list window. Intellisense based on expected elements, attributes, and enumerated simple type values. Support for custom editors for date, dateTime, and time datatypes, and other types like color. Handy nudge toolbar buttons for quick movement of nodes up and down the tree. In-place HTML viewer for processing <?xml-stylesheet instructions. Built-in XML Diff tool. Support for XInclude. Handy \"XML statistics\" tool to summarize info about your XML documents. Dynamic help from XSD annotations. Goto definition to navigate includes and XSD schema information. Generate XML document from XSD Schema . Vibrant community with many updates and bug fixes . Go to the installer page . The source code is available at https://github.com/microsoft/XmlNotepad . Please provide feedback or any issues you have using the XML Notepad GitHub issues list. See development information on how to build XML Notepad from source. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"Handy features include:"},{"location":"install/","text":"Install XML Notepad # There are thee ways to install XML Notepad. First you must install .NET Framework version 4.8 . Then the most convenient is to install it directly from the web browser using the ClickOnce installer: ClickOnce\u00ae installer If you need something that installs offline for machines that have no network or are isolated from the internet then use the standalone installer: Standalone installer Just download the zip file, copy it to the machine you want to install it on, unzip the file on that machine and run XmlNotepadSetup.msi . And lastly, you can also use winget to install XML Notepad: winget installer Or use this command line if you have the winget cli installed: winget install XmlNotepad webview2 WebView2 is an optional component that you can install from Microsoft. XML Notepad will use this component as the HTML rendering engine behind the XSLT Output tab . WebView2 provides a significant performance boost on large XSLT outputs. See XML Notepad File Association .","title":"Install"},{"location":"install/#install-xml-notepad","text":"There are thee ways to install XML Notepad. First you must install .NET Framework version 4.8 . Then the most convenient is to install it directly from the web browser using the ClickOnce installer: ClickOnce\u00ae installer If you need something that installs offline for machines that have no network or are isolated from the internet then use the standalone installer: Standalone installer Just download the zip file, copy it to the machine you want to install it on, unzip the file on that machine and run XmlNotepadSetup.msi . And lastly, you can also use winget to install XML Notepad: winget installer Or use this command line if you have the winget cli installed: winget install XmlNotepad webview2 WebView2 is an optional component that you can install from Microsoft. XML Notepad will use this component as the HTML rendering engine behind the XSLT Output tab . WebView2 provides a significant performance boost on large XSLT outputs. See XML Notepad File Association .","title":"Install XML Notepad"},{"location":"dev/","text":"XmlNotepad Development # You can build and test XML Notepad using Visual Studio 2022 . It uses .NET frameworks, so be sure to install the \".NET desktop development\" feature when using the Visual Studio Installer. XML Notepad targets .NET Framework version 4.8 . Coding Guidelines # XmlNotepad follows the standard C# Coding Guidelines with the default C# formatting settings that ship with VS 2022. The following additional conventions are also followed: All if/else statements use curly brackets. Add private/internal/public access explicitly on all members. Do not use \"s_\" prefix on statics, instead use Class name qualification. All private fields prefixed with _ except for WinForms generated code. Accessing fields with this. is ok, do not strip this. prefix if used. Constants are PascalCased even if they are private to a class. Try and collect all private fields at the top of the class. Public fields are PascalCased like public properties and methods. Generally one class per file, unless there is a super natural family of classes, like Commands.cs, that would cause an unnecessary explosion in number of files. Nice to have blank line between methods. Use \"Remove and Sort Usings\" command in VS. Build the code # First clone the repo: git clone https://github.com/microsoft/XmlNotepad.git From the command line initialize your ApiKey.cs file: echo namespace XmlNotepad { public partial class AppAnalytics { private const string ApiKey=\"%XMLNOTEPAD_ANALYTICSKEY%\"; } } > src\\model\\ApiKey.cs Then restore all the nuget packages nuget restore xmlnotepad.sln Then you can build it: msbuild xmlnotepad.sln Using Visual Studio: Load src/XmlNotepad.sln into Visual Studio. Select Debug or Release and target \"Any CPU\". Run Rebuild Solution (rebuild also installs any missing nuget packages) Debug the app # Right click the Application project and select Set as Startup Project . Select Debug configuration. Press F5 to start debugging. Test the app # After building the app: Right click the UnitTests project and select Run tests . This is a GUI test, so do not move your mouse or type on your keyboard or let your screen lock until this test is completed. Total test run time is about 12 minutes. The tests all pass on Windows 10, but currently some tests fail on Windows 11, there seems to be some breaking changes in the Windows Automation layer that XML Notepad tests are using. This is being investigated. Note: bug 10244 is still open in in .net 4.8 System.Windows.Automation of menu items that blocks the tests, so checkout the branch clovett/net472 to run the unit tests. UpdateVersions # The UpdateVersions project synchronizes the Version.props information across multiple places so you can edit the version number in Version.props and this tool will replicate that across the following: The Version.cs file which sets the assembly version for all projects in the solution. The WIX based setup file Product.wxs . The windows package manifest file Package.appxmanifest . The updates.xml file. The readme.htm file. You will also have to restart Visual Studio so that the new versions are picked up by the ClickOnce deployment information in Application.csproj . Publish the app and all setups # The publish.cmd script runs UpdateVersions, builds Release bits, builds the ClickOnce installer and the winget.msix installer from XmlNotepadPackage , and the standalone .msi installer from XmlNotepadSetup , it zips these files so they can be available on the Github Release page then it creates the new github release for the current version. It also signs the assemblies and installers using the signing certificate specified by the environment variable MYKEYFILE . The ClickOnce installed is uploaded to lovettsoftware using the environment variable LOVETTSOFTWARE_STORAGE_CONNECTION_STRING. Click once is convenient because it provides auto-updating whenever a new version is published. Build the setup .msi installer # After building the Release configuration of XmlNotepad.sln load the XmlNotepadSetup.sln . This solution uses the WIX Toolset to build a standalone windows .msi installer. To build that setup you will need to install the WIX toolset then the Wix Toolset Visual Studio 2022 Extension . Then right click the XmlNotepadSetup project and select \"build\". This will produce an .msi installer in the XmlNotepadSetup\\bin\\release folder. There is also a sign.cmd script invoked by this build that will try and sign the resulting .msi using the certificate installed by the author. This step will only work for the author who owns the certificate. This msi installer gives folks the option to install XML Notepad on machines that are isolated from the internet and there are quite a few customers who have requested this, which is why it exists. Build the winget setup package # The winget setup package is built by the XmlNotepadPackage project in the XmlNotepadSetup.sln solution. Right click this project in the Solution Explorer and select Publish and Create App Packages . Choose Sideloading, and the package files will be written to the XmlNotepadPackage\\AppPackages folder. These can then be uploaded to the server hosting these packages and you can then update the manifest in winget-pkgs . This package provides the winget install xmlnotepad setup option. Publishing the bits to Azure Blob Store # The publish.cmd script uses the AzurePublishClickOnce tool which uses the environment variable named LOVETTSOFTWARE_STORAGE_CONNECTION_STRING to access the Azure storage account where it uploads the new clickonce installer, and removes the older versions so that the storage account does not keep growing and growing. Design # See XML Notepad Design for more detailed information about how this application is designed. Issues # Feedback and suggestions are welcome, just use the GitHub issues list . Pull requests are also welcome, in fact, a number of good pull requests have already been merged. Thanks to all who are helping to make XML Notepad a great tool!","title":"Overview"},{"location":"dev/#xmlnotepad-development","text":"You can build and test XML Notepad using Visual Studio 2022 . It uses .NET frameworks, so be sure to install the \".NET desktop development\" feature when using the Visual Studio Installer. XML Notepad targets .NET Framework version 4.8 .","title":"XmlNotepad Development"},{"location":"dev/#coding-guidelines","text":"XmlNotepad follows the standard C# Coding Guidelines with the default C# formatting settings that ship with VS 2022. The following additional conventions are also followed: All if/else statements use curly brackets. Add private/internal/public access explicitly on all members. Do not use \"s_\" prefix on statics, instead use Class name qualification. All private fields prefixed with _ except for WinForms generated code. Accessing fields with this. is ok, do not strip this. prefix if used. Constants are PascalCased even if they are private to a class. Try and collect all private fields at the top of the class. Public fields are PascalCased like public properties and methods. Generally one class per file, unless there is a super natural family of classes, like Commands.cs, that would cause an unnecessary explosion in number of files. Nice to have blank line between methods. Use \"Remove and Sort Usings\" command in VS.","title":"Coding Guidelines"},{"location":"dev/#build-the-code","text":"First clone the repo: git clone https://github.com/microsoft/XmlNotepad.git From the command line initialize your ApiKey.cs file: echo namespace XmlNotepad { public partial class AppAnalytics { private const string ApiKey=\"%XMLNOTEPAD_ANALYTICSKEY%\"; } } > src\\model\\ApiKey.cs Then restore all the nuget packages nuget restore xmlnotepad.sln Then you can build it: msbuild xmlnotepad.sln Using Visual Studio: Load src/XmlNotepad.sln into Visual Studio. Select Debug or Release and target \"Any CPU\". Run Rebuild Solution (rebuild also installs any missing nuget packages)","title":"Build the code"},{"location":"dev/#debug-the-app","text":"Right click the Application project and select Set as Startup Project . Select Debug configuration. Press F5 to start debugging.","title":"Debug the app"},{"location":"dev/#test-the-app","text":"After building the app: Right click the UnitTests project and select Run tests . This is a GUI test, so do not move your mouse or type on your keyboard or let your screen lock until this test is completed. Total test run time is about 12 minutes. The tests all pass on Windows 10, but currently some tests fail on Windows 11, there seems to be some breaking changes in the Windows Automation layer that XML Notepad tests are using. This is being investigated. Note: bug 10244 is still open in in .net 4.8 System.Windows.Automation of menu items that blocks the tests, so checkout the branch clovett/net472 to run the unit tests.","title":"Test the app"},{"location":"dev/#updateversions","text":"The UpdateVersions project synchronizes the Version.props information across multiple places so you can edit the version number in Version.props and this tool will replicate that across the following: The Version.cs file which sets the assembly version for all projects in the solution. The WIX based setup file Product.wxs . The windows package manifest file Package.appxmanifest . The updates.xml file. The readme.htm file. You will also have to restart Visual Studio so that the new versions are picked up by the ClickOnce deployment information in Application.csproj .","title":"UpdateVersions"},{"location":"dev/#publish-the-app-and-all-setups","text":"The publish.cmd script runs UpdateVersions, builds Release bits, builds the ClickOnce installer and the winget.msix installer from XmlNotepadPackage , and the standalone .msi installer from XmlNotepadSetup , it zips these files so they can be available on the Github Release page then it creates the new github release for the current version. It also signs the assemblies and installers using the signing certificate specified by the environment variable MYKEYFILE . The ClickOnce installed is uploaded to lovettsoftware using the environment variable LOVETTSOFTWARE_STORAGE_CONNECTION_STRING. Click once is convenient because it provides auto-updating whenever a new version is published.","title":"Publish the app and all setups"},{"location":"dev/#build-the-setup-msi-installer","text":"After building the Release configuration of XmlNotepad.sln load the XmlNotepadSetup.sln . This solution uses the WIX Toolset to build a standalone windows .msi installer. To build that setup you will need to install the WIX toolset then the Wix Toolset Visual Studio 2022 Extension . Then right click the XmlNotepadSetup project and select \"build\". This will produce an .msi installer in the XmlNotepadSetup\\bin\\release folder. There is also a sign.cmd script invoked by this build that will try and sign the resulting .msi using the certificate installed by the author. This step will only work for the author who owns the certificate. This msi installer gives folks the option to install XML Notepad on machines that are isolated from the internet and there are quite a few customers who have requested this, which is why it exists.","title":"Build the setup .msi installer"},{"location":"dev/#build-the-winget-setup-package","text":"The winget setup package is built by the XmlNotepadPackage project in the XmlNotepadSetup.sln solution. Right click this project in the Solution Explorer and select Publish and Create App Packages . Choose Sideloading, and the package files will be written to the XmlNotepadPackage\\AppPackages folder. These can then be uploaded to the server hosting these packages and you can then update the manifest in winget-pkgs . This package provides the winget install xmlnotepad setup option.","title":"Build the winget setup package"},{"location":"dev/#publishing-the-bits-to-azure-blob-store","text":"The publish.cmd script uses the AzurePublishClickOnce tool which uses the environment variable named LOVETTSOFTWARE_STORAGE_CONNECTION_STRING to access the Azure storage account where it uploads the new clickonce installer, and removes the older versions so that the storage account does not keep growing and growing.","title":"Publishing the bits to Azure Blob Store"},{"location":"dev/#design","text":"See XML Notepad Design for more detailed information about how this application is designed.","title":"Design"},{"location":"dev/#issues","text":"Feedback and suggestions are welcome, just use the GitHub issues list . Pull requests are also welcome, in fact, a number of good pull requests have already been merged. Thanks to all who are helping to make XML Notepad a great tool!","title":"Issues"},{"location":"dev/design/","text":"XML Notepad Design # By Chris Lovett , Microsoft In the GitHub repo, you'll find the core XmlNotepad DLL project, an Application project that builds XmlNotepad.exe, and some setup projects like XmlNotepadSetup which builds the .msi installer, and the UnitTests project for testing XML Notepad. The following DGML diagram shows the relationships between the main UI classes. The main form contains all the UI elements from the TaskList to the main XmlTreeView with Resizers in between; it's the launching point for the dialogs such as FormSearch, FormSchemas, FormOption, and FormAbout. The main tab control contains the XmlTreeView and the XsltViewer for showing XSL output. The XmlTreeView contains a TreeView on the left and a NodeTextView on the right and coordinates scrolling between these two views. Both the TreeView and NodeTextView provide the same IntelliSense editing functionality using a TextEditorOverlay component. The XmlTreeView implements IFindTarget, which is used by the Find dialog (FormSearch) to implement find/replace functionality. The Find dialog supports full text, regex, or XPath expressions and can filter by names or values. Model # The core data model behind the UI is System.Xml.XmlDocument and its XmlNode objects. These nodes are wrapped by TreeNode UI objects. To facilitate support for the XML Include spec, there is a custom reader that processes XML Includes, and there is also a custom DomLoader that keeps track of line information for error messages. Validation, IntelliSense, and Custom Editors # The biggest new feature is IntelliSense, which is driven by XML Schema information provided via the SchemaCache. For example, if your element or attribute is defined by an XSD simpleType and this simpleType contains a list of enumeration facets, then you will get a drop-down like this: The way this works is that the Checker runs after each edit operation to validate the document and report errors in the TaskList. This process also puts System.Xml.Schema.XmlSchemaType information on each element and attribute in the XmlDocument; then, when editing the value of that node, the TextEditorOverlay uses the XmlIntelliSenseProvider to get back a list of possible values. In the above example, it returns the values from the simpleType enumeration facets. For element name IntelliSense in the tree view, the XmlIntelliSenseProvider invokes the Checker again, captures GetExpectedParticles and GetExpectedAttributes on the System.Xml.Schema.XmlSchemaValidator , and uses that to provide IntelliSense. The TextEditorOverlay also supports custom editors like the DateTimeEditor or the UriBuilder or ColorBuilder . There are two types of custom editors: IXmlEditors, which are inline editors that replace the default TextBox, and IXmlBuilders, which are popup dialogs like the OpenFileDialog or ColorDialog. The type of editor is derived from the schema type information \u2014 \"xs:date\", \"xs:time\", \"xs:datetime\" results in the DateTimeEditor, and \"xs:anyURI\" results in the UriBuilder. You can also annotate the schema with a custom \"vs:builder\" attribute in the http://schemas.microsoft.com/Visual-Studio-IntelliSense namespace. See the Help content for more information. Infinite Undo/Redo # To implement undo/redo, XML Notepad follows a common design pattern of Command objects with Undo and Redo methods. Commands operate on both a TreeNode and an XmlNode because some commands like InsertNode don't have an XmlNode yet until they are performed, but the command needs to know where in the tree this new node will be inserted and during Undo where it should be removed. The UndoManager collects these in a list. Then the state of the UndoManager controls the enabled/disabled state of the Undo/Redo MenuItems. When the user selects the Undo menu item, the Undo method is called on the active command, and that command is pushed onto the Redo stack. Some operations in the editor cause many edits in the tree, including the replace-all operation and editing the value of a namespace attribute. (When you change the value of a namespace attribute, every XmlNode bound to that namespace needs to be reconstructed with a new namespace URI, which can obviously affect a lot of nodes in the tree!) So, to make these operations one atomic undo operation, there is a CompoundCommand object that contains a list of smaller edit commands, and this CompoundCommand is put into the UndoManager . Other simpler command objects include the following, which all operate on XmlTreeNode and XmlNode objects: The PasteCommand is special because it takes random XML text off the clipboard and parses it in the context of the currently selected element in the tree, inheriting the namespaces in scope. The helper class TreeData uses the special XmlTextReader constructor that takes an XmlParserContext as input. Accessibility # In order to make testing possible using System.Windows.Automation , there are some custom AccessibleObject implementations inside the TreeView and NodeTextView. See AccessibleNode and AccessibleNodeTextViewNode . These accessibility classes should also make Windows accessibility features work better with those custom views. Missing Documentation? # If you want more detailed documentation on some aspect of XML Notepad, please create a new GitHub issue .","title":"Design"},{"location":"dev/design/#xml-notepad-design","text":"By Chris Lovett , Microsoft In the GitHub repo, you'll find the core XmlNotepad DLL project, an Application project that builds XmlNotepad.exe, and some setup projects like XmlNotepadSetup which builds the .msi installer, and the UnitTests project for testing XML Notepad. The following DGML diagram shows the relationships between the main UI classes. The main form contains all the UI elements from the TaskList to the main XmlTreeView with Resizers in between; it's the launching point for the dialogs such as FormSearch, FormSchemas, FormOption, and FormAbout. The main tab control contains the XmlTreeView and the XsltViewer for showing XSL output. The XmlTreeView contains a TreeView on the left and a NodeTextView on the right and coordinates scrolling between these two views. Both the TreeView and NodeTextView provide the same IntelliSense editing functionality using a TextEditorOverlay component. The XmlTreeView implements IFindTarget, which is used by the Find dialog (FormSearch) to implement find/replace functionality. The Find dialog supports full text, regex, or XPath expressions and can filter by names or values.","title":"XML Notepad Design"},{"location":"dev/design/#model","text":"The core data model behind the UI is System.Xml.XmlDocument and its XmlNode objects. These nodes are wrapped by TreeNode UI objects. To facilitate support for the XML Include spec, there is a custom reader that processes XML Includes, and there is also a custom DomLoader that keeps track of line information for error messages.","title":"Model"},{"location":"dev/design/#validation-intellisense-and-custom-editors","text":"The biggest new feature is IntelliSense, which is driven by XML Schema information provided via the SchemaCache. For example, if your element or attribute is defined by an XSD simpleType and this simpleType contains a list of enumeration facets, then you will get a drop-down like this: The way this works is that the Checker runs after each edit operation to validate the document and report errors in the TaskList. This process also puts System.Xml.Schema.XmlSchemaType information on each element and attribute in the XmlDocument; then, when editing the value of that node, the TextEditorOverlay uses the XmlIntelliSenseProvider to get back a list of possible values. In the above example, it returns the values from the simpleType enumeration facets. For element name IntelliSense in the tree view, the XmlIntelliSenseProvider invokes the Checker again, captures GetExpectedParticles and GetExpectedAttributes on the System.Xml.Schema.XmlSchemaValidator , and uses that to provide IntelliSense. The TextEditorOverlay also supports custom editors like the DateTimeEditor or the UriBuilder or ColorBuilder . There are two types of custom editors: IXmlEditors, which are inline editors that replace the default TextBox, and IXmlBuilders, which are popup dialogs like the OpenFileDialog or ColorDialog. The type of editor is derived from the schema type information \u2014 \"xs:date\", \"xs:time\", \"xs:datetime\" results in the DateTimeEditor, and \"xs:anyURI\" results in the UriBuilder. You can also annotate the schema with a custom \"vs:builder\" attribute in the http://schemas.microsoft.com/Visual-Studio-IntelliSense namespace. See the Help content for more information.","title":"Validation, IntelliSense, and Custom Editors"},{"location":"dev/design/#infinite-undoredo","text":"To implement undo/redo, XML Notepad follows a common design pattern of Command objects with Undo and Redo methods. Commands operate on both a TreeNode and an XmlNode because some commands like InsertNode don't have an XmlNode yet until they are performed, but the command needs to know where in the tree this new node will be inserted and during Undo where it should be removed. The UndoManager collects these in a list. Then the state of the UndoManager controls the enabled/disabled state of the Undo/Redo MenuItems. When the user selects the Undo menu item, the Undo method is called on the active command, and that command is pushed onto the Redo stack. Some operations in the editor cause many edits in the tree, including the replace-all operation and editing the value of a namespace attribute. (When you change the value of a namespace attribute, every XmlNode bound to that namespace needs to be reconstructed with a new namespace URI, which can obviously affect a lot of nodes in the tree!) So, to make these operations one atomic undo operation, there is a CompoundCommand object that contains a list of smaller edit commands, and this CompoundCommand is put into the UndoManager . Other simpler command objects include the following, which all operate on XmlTreeNode and XmlNode objects: The PasteCommand is special because it takes random XML text off the clipboard and parses it in the context of the currently selected element in the tree, inheriting the namespaces in scope. The helper class TreeData uses the special XmlTextReader constructor that takes an XmlParserContext as input.","title":"Infinite Undo/Redo"},{"location":"dev/design/#accessibility","text":"In order to make testing possible using System.Windows.Automation , there are some custom AccessibleObject implementations inside the TreeView and NodeTextView. See AccessibleNode and AccessibleNodeTextViewNode . These accessibility classes should also make Windows accessibility features work better with those custom views.","title":"Accessibility"},{"location":"dev/design/#missing-documentation","text":"If you want more detailed documentation on some aspect of XML Notepad, please create a new GitHub issue .","title":"Missing Documentation?"},{"location":"help/analytics/","text":"Analytics # To understand which features are important, XML Notepad records anonymous usage data, like: The number of times the app is used. The number of times each feature is used (options, xslt, search, etc) The data is collected using Google Analytics and shared solely with members of the XML Notepad development team. It's used to prioritize future enhancements. As a sneak peek, here is a map illustrating the countries where XML Notepad was used in July 2022. This vibrant user community is a strong motivator for the team to continually refine XML Notepad. Here's some raw data from August 2022 to August 2023: Action Counts Description /App/Launch 1,082,553 Times app was launched /App/XsltView 140,703 Times XSLT view was used /App/FormSearch 83,020 Times the Search dialog was used /App/FormOptions 4,448 Times the Options dialog was used /XmlNotepad/ 208,520 Visits to the web home page /XmlNotepad/install/ 78,812 Visits to the install page The first time you install XML Notepad on your computer you will be prompted with the following dialog: We appreciate those who allow analytics to be collected; significantly aids in understanding usage patterns and prioritizing improvements. However, if you prefer not to participate, click No then your preference will be written to the XML Notepad settings file, and the prompt will not reappear. You can enable or disable analytics at any time using the Allow analytics option in the Options dialog . For enterprise-wide distributions or pre-installation customization, you can set the following environment variable system-wide on the end user's machine: set XML_NOTEPAD_DISABLE_ANALYTICS=1 Additionally, you can disable the Analytics UI option from appearing in the Options dialog by setting the AnalyticsClientId to disabled in the default XmlNotepad.settings file as follows: <Settings> <AnalyticsClientId>disabled</AnalyticsClientId> <AllowAnalytics>False</AllowAnalytics> </Settings> This ensures that users cannot enable analytics after starting XML Notepad.","title":"Analytics"},{"location":"help/analytics/#analytics","text":"To understand which features are important, XML Notepad records anonymous usage data, like: The number of times the app is used. The number of times each feature is used (options, xslt, search, etc) The data is collected using Google Analytics and shared solely with members of the XML Notepad development team. It's used to prioritize future enhancements. As a sneak peek, here is a map illustrating the countries where XML Notepad was used in July 2022. This vibrant user community is a strong motivator for the team to continually refine XML Notepad. Here's some raw data from August 2022 to August 2023: Action Counts Description /App/Launch 1,082,553 Times app was launched /App/XsltView 140,703 Times XSLT view was used /App/FormSearch 83,020 Times the Search dialog was used /App/FormOptions 4,448 Times the Options dialog was used /XmlNotepad/ 208,520 Visits to the web home page /XmlNotepad/install/ 78,812 Visits to the install page The first time you install XML Notepad on your computer you will be prompted with the following dialog: We appreciate those who allow analytics to be collected; significantly aids in understanding usage patterns and prioritizing improvements. However, if you prefer not to participate, click No then your preference will be written to the XML Notepad settings file, and the prompt will not reappear. You can enable or disable analytics at any time using the Allow analytics option in the Options dialog . For enterprise-wide distributions or pre-installation customization, you can set the following environment variable system-wide on the end user's machine: set XML_NOTEPAD_DISABLE_ANALYTICS=1 Additionally, you can disable the Analytics UI option from appearing in the Options dialog by setting the AnalyticsClientId to disabled in the default XmlNotepad.settings file as follows: <Settings> <AnalyticsClientId>disabled</AnalyticsClientId> <AllowAnalytics>False</AllowAnalytics> </Settings> This ensures that users cannot enable analytics after starting XML Notepad.","title":"Analytics"},{"location":"help/clipboard/","text":"Clipboard # Cut/Copy/Paste and Drag/drop are based on the same XML clipboard format. For example, you can drag a node out of XML Notepad and into any editor that supports a text clipboard format and its the same as doing a Cut & Paste operation. The clipboard format is the XML serialization of the selected node, along with any necessary any namespace declarations needed to ensure the fragment well formed. When XML is pasted from the clipboard (or dropped) onto the tree view , the namespace declarations are matched those already present in the target document and normalized accordingly. This prevents your document from accumulating redundant namespace declarations as a side effect of these editing operations.","title":"Clipboard"},{"location":"help/clipboard/#clipboard","text":"Cut/Copy/Paste and Drag/drop are based on the same XML clipboard format. For example, you can drag a node out of XML Notepad and into any editor that supports a text clipboard format and its the same as doing a Cut & Paste operation. The clipboard format is the XML serialization of the selected node, along with any necessary any namespace declarations needed to ensure the fragment well formed. When XML is pasted from the clipboard (or dropped) onto the tree view , the namespace declarations are matched those already present in the target document and normalized accordingly. This prevents your document from accumulating redundant namespace declarations as a side effect of these editing operations.","title":"Clipboard"},{"location":"help/customeditors/","text":"Custom Editors # If an XML schema is provided for validation, it can also define custom editors on specific <xsd:simpleType> tags. A default custom editor is provided for the simpleTypes xsd:date , xsd:dateTime , and xsd:time . Any element or attribute of this type will be edited using the WinForms DateTimePicker, configured for the current system locale, for example: Custom Builders # Custom Builders provide a button that appears at the top of the intellisense list. When the user clicks on that button, it invokes the builder to edit the value, typically triggering a modal dialog. A custom builder for editing file names is provided and is automatically associated with the xsd:anyURI data type. You can associate this builder manually using the vs:builder=\"XmlNotepad.UriBuilder\"> attribute. When you edit an element of this type, a button titled \"Browse...\" will appear at the top of the intellisense list, and clicking it will open the WinForms OpenFileDialog. A custom builder for editing colors is also provided. However, since there is no standard color type defined in XSD, you must specify the vs:builder attribute as shown in the following example: <xsd:simpleType name=\"color\" vs:builder=\"XmlNotepad.ColorBuilder\"> Where the vs prefix is bound to the following namespace: xmlns:vs=\"http://schemas.microsoft.com/Visual-Studio-Intellisense\" . If you build your own custom editors, you will also need to specify the vs:assembly=\"FontBuilder, Version=1.0.0.0, Culture=neutral, PublicKeyToken=007b972e7cff2ded, processorArchitecture=MSIL\" attribute to point to your assembly. XML Notepad will then load your assembly so it can find the specified types. When you edit an element of this type a button titled \"Color Picker\" will appear at the top of the intellisense list and and clicking on it will open the WinForms ColorDialog. The resulting color will then be serialized back to the XML string using the ColorConverter . You can implement your own builders by implementing IXmlBuilder and specifying your full class name in the vs:builder attribute. See also Schemas Dialog .","title":"Custom Editors"},{"location":"help/customeditors/#custom-editors","text":"If an XML schema is provided for validation, it can also define custom editors on specific <xsd:simpleType> tags. A default custom editor is provided for the simpleTypes xsd:date , xsd:dateTime , and xsd:time . Any element or attribute of this type will be edited using the WinForms DateTimePicker, configured for the current system locale, for example:","title":"Custom Editors"},{"location":"help/customeditors/#custom-builders","text":"Custom Builders provide a button that appears at the top of the intellisense list. When the user clicks on that button, it invokes the builder to edit the value, typically triggering a modal dialog. A custom builder for editing file names is provided and is automatically associated with the xsd:anyURI data type. You can associate this builder manually using the vs:builder=\"XmlNotepad.UriBuilder\"> attribute. When you edit an element of this type, a button titled \"Browse...\" will appear at the top of the intellisense list, and clicking it will open the WinForms OpenFileDialog. A custom builder for editing colors is also provided. However, since there is no standard color type defined in XSD, you must specify the vs:builder attribute as shown in the following example: <xsd:simpleType name=\"color\" vs:builder=\"XmlNotepad.ColorBuilder\"> Where the vs prefix is bound to the following namespace: xmlns:vs=\"http://schemas.microsoft.com/Visual-Studio-Intellisense\" . If you build your own custom editors, you will also need to specify the vs:assembly=\"FontBuilder, Version=1.0.0.0, Culture=neutral, PublicKeyToken=007b972e7cff2ded, processorArchitecture=MSIL\" attribute to point to your assembly. XML Notepad will then load your assembly so it can find the specified types. When you edit an element of this type a button titled \"Color Picker\" will appear at the top of the intellisense list and and clicking on it will open the WinForms ColorDialog. The resulting color will then be serialized back to the XML string using the ColorConverter . You can implement your own builders by implementing IXmlBuilder and specifying your full class name in the vs:builder attribute. See also Schemas Dialog .","title":"Custom Builders"},{"location":"help/dragdrop/","text":"Drag/Drop Support # You can drag and drop nodes from the tree view to rearrange them within the document or more them across documents using multiple instances of XML Notepad. (Note: You can easily create a new instance of XML Notepad by selecting the Window/New Window menu item). Additionally, you can drag an XML file from Windows Explorer onto XML Notepad as a quick way to open that file. When you drag and drop nodes across programs, it uses the same text format as Cut/Copy/Paste . As you drag the selected element, a shadow node will appear in the tree, moving with the cursor to indicate where the node will be placed. In the example below, the \"Street\" element is being dragged to a new location after the \"First\" element and before the \"Middle\" element: When hovering the mouse over a collapsed node, automatically expands to facilitate dropping the node inside that collapsed container. Conversely, when hovering over an expanded node, it automatically collapses, aiding in finding nodes above or below that container. By default, dragging is a move operation, even across XML Notepad instances, meaning if you drag a node from one XML Notepad instance to another, it will be removed from the first instance. If you wish to perform a copy operation instead, hold down the CONTROL key. See Keyboard for more information.","title":"Dragdrop"},{"location":"help/dragdrop/#dragdrop-support","text":"You can drag and drop nodes from the tree view to rearrange them within the document or more them across documents using multiple instances of XML Notepad. (Note: You can easily create a new instance of XML Notepad by selecting the Window/New Window menu item). Additionally, you can drag an XML file from Windows Explorer onto XML Notepad as a quick way to open that file. When you drag and drop nodes across programs, it uses the same text format as Cut/Copy/Paste . As you drag the selected element, a shadow node will appear in the tree, moving with the cursor to indicate where the node will be placed. In the example below, the \"Street\" element is being dragged to a new location after the \"First\" element and before the \"Middle\" element: When hovering the mouse over a collapsed node, automatically expands to facilitate dropping the node inside that collapsed container. Conversely, when hovering over an expanded node, it automatically collapses, aiding in finding nodes above or below that container. By default, dragging is a move operation, even across XML Notepad instances, meaning if you drag a node from one XML Notepad instance to another, it will be removed from the first instance. If you wish to perform a copy operation instead, hold down the CONTROL key. See Keyboard for more information.","title":"Drag/Drop Support"},{"location":"help/dynamic/","text":"Dynamic Help # When you have an associated XSD schema , the xsd:documentation associated with the current node is displayed in a tooltip popup and in the Dynamic Help Tab. For example, the Employee.xsd schema contains the following annotation on the definition of the Employee Id attribute: <xs:simpleType name=\"EmployeeID\"> <xs:annotation> <xs:documentation xml:lang=\"en\">The ITG assigned 5 digit employee identification</xs:documentation> <xs:documentation xml:lang=\"fr\">Le groupe ITG assign\u00e9s 5 identification d'employ\u00e9 \u00e0 chiffres</xs:documentation> </xs:annotation> <xs:restriction base=\"xs:string\"> <xs:length value=\"5\" /> </xs:restriction> </xs:simpleType> Now, if you open Employee.xml and select the Employee Id attribute you will see this annotation listed in the Dynamic Help tab as follows:","title":"Dynamic Help"},{"location":"help/dynamic/#dynamic-help","text":"When you have an associated XSD schema , the xsd:documentation associated with the current node is displayed in a tooltip popup and in the Dynamic Help Tab. For example, the Employee.xsd schema contains the following annotation on the definition of the Employee Id attribute: <xs:simpleType name=\"EmployeeID\"> <xs:annotation> <xs:documentation xml:lang=\"en\">The ITG assigned 5 digit employee identification</xs:documentation> <xs:documentation xml:lang=\"fr\">Le groupe ITG assign\u00e9s 5 identification d'employ\u00e9 \u00e0 chiffres</xs:documentation> </xs:annotation> <xs:restriction base=\"xs:string\"> <xs:length value=\"5\" /> </xs:restriction> </xs:simpleType> Now, if you open Employee.xml and select the Employee Id attribute you will see this annotation listed in the Dynamic Help tab as follows:","title":"Dynamic Help"},{"location":"help/fileassociation/","text":"XML Notepad File Association # Watch the following video tutorial to learn how to associate XML Notepad with various .xml file types: YouTube Video Here's a step-by-step guide: Open XML Notepad, which you have already installed. Navigate to Help > Open Sample... and select \"Hamlet.xml\". Note the long file path displayed in the address bar, such as: C:\\Program Files\\WindowsApps\\43906ChrisLovett.XmlNotepad_2.9.0.5_neutral__hndwmj480pefj\\Application\\Samples\\Hamlet.xml If you open this path in Windows Explorer you can locate XmlNotepad.exe here: C:\\Program Files\\WindowsApps\\43906ChrisLovett.XmlNotepad_2.9.0.5_neutral__hndwmj480pefj\\Application\\XmlNotepad.exe Copy this path to the clipboard. Now, follow these steps: - Open the \"Default apps\" settings dialog using the start menu. - Enter the file type at the top (e.g., type in \".xsd\" or \".xslt\"). - Click the button labeled + Choose a default . - Scroll to the bottom of this dialog and click Choose an app on your PC . - Paste in the path you copied to the clipboard earlier. - Click Open , then click Set Default . As soon as you do this, the icon on the file type you associated should change in Windows Explorer showing the XML Notepad icon, and when you double click the file, it will automatically open XML Notepad. Note that when you have done one extension, all the other extensions are much easier because XML Notepad will now show up in the list of possible apps to choose. Keep in mind that the path you have registered here is version specific, so you may have to repeat this process when you install new versions of XML Notepad.","title":"Fileassociation"},{"location":"help/fileassociation/#xml-notepad-file-association","text":"Watch the following video tutorial to learn how to associate XML Notepad with various .xml file types: YouTube Video Here's a step-by-step guide: Open XML Notepad, which you have already installed. Navigate to Help > Open Sample... and select \"Hamlet.xml\". Note the long file path displayed in the address bar, such as: C:\\Program Files\\WindowsApps\\43906ChrisLovett.XmlNotepad_2.9.0.5_neutral__hndwmj480pefj\\Application\\Samples\\Hamlet.xml If you open this path in Windows Explorer you can locate XmlNotepad.exe here: C:\\Program Files\\WindowsApps\\43906ChrisLovett.XmlNotepad_2.9.0.5_neutral__hndwmj480pefj\\Application\\XmlNotepad.exe Copy this path to the clipboard. Now, follow these steps: - Open the \"Default apps\" settings dialog using the start menu. - Enter the file type at the top (e.g., type in \".xsd\" or \".xslt\"). - Click the button labeled + Choose a default . - Scroll to the bottom of this dialog and click Choose an app on your PC . - Paste in the path you copied to the clipboard earlier. - Click Open , then click Set Default . As soon as you do this, the icon on the file type you associated should change in Windows Explorer showing the XML Notepad icon, and when you double click the file, it will automatically open XML Notepad. Note that when you have done one extension, all the other extensions are much easier because XML Notepad will now show up in the list of possible apps to choose. Keep in mind that the path you have registered here is version specific, so you may have to repeat this process when you install new versions of XML Notepad.","title":"XML Notepad File Association"},{"location":"help/find/","text":"Find/Replace # Selecting the \"Find...\" item under the Edit Menu (CTRL+F) opens the following dialog: Choosing \"Replace...\" item under the Edit Menu (CTRL+H) modifies this dialog to display additional replace fields: By default this dialog will allow you to search \"Everything\" in the current XML document with a specified find string. You can refine the search using the following options: Match case : Only find nodes that contain the exact search string in the same case. Match whole word : Only find nodes that contain the search string as a complete word, i.e., not a substring. Use Regular Expressions : Treats the find string as a regular expression. See .NET regular expressions for help with the regular expression language. Use XPath : Allows you to find nodes using an XPath expression. Choosing this option reveals an extra table where you can edit the namespace prefix mappings used in the XPath expression. See XPath Syntax for help with the XPath expression language. Search Filter : Limits the search to just \"Names\" which means only search node names, or \"Text\" which means only search node values, or \"Comments\" which means only search comment nodes. Direction : Determines the search direction: \"Up\" (backwards from the current location) or \"Down\" (forwards). Find Next : Finds the next matching node in the specified direction after the currently selected node and highlights the matching substring within the node name or value. Replace : Finds the next matching node in the specified direction after the currently selected node and replaces it with the specified replace text. Replace All : Replaces all matching text with the specified replace text.","title":"Find"},{"location":"help/find/#findreplace","text":"Selecting the \"Find...\" item under the Edit Menu (CTRL+F) opens the following dialog: Choosing \"Replace...\" item under the Edit Menu (CTRL+H) modifies this dialog to display additional replace fields: By default this dialog will allow you to search \"Everything\" in the current XML document with a specified find string. You can refine the search using the following options: Match case : Only find nodes that contain the exact search string in the same case. Match whole word : Only find nodes that contain the search string as a complete word, i.e., not a substring. Use Regular Expressions : Treats the find string as a regular expression. See .NET regular expressions for help with the regular expression language. Use XPath : Allows you to find nodes using an XPath expression. Choosing this option reveals an extra table where you can edit the namespace prefix mappings used in the XPath expression. See XPath Syntax for help with the XPath expression language. Search Filter : Limits the search to just \"Names\" which means only search node names, or \"Text\" which means only search node values, or \"Comments\" which means only search comment nodes. Direction : Determines the search direction: \"Up\" (backwards from the current location) or \"Down\" (forwards). Find Next : Finds the next matching node in the specified direction after the currently selected node and highlights the matching substring within the node name or value. Replace : Finds the next matching node in the specified direction after the currently selected node and replaces it with the specified replace text. Replace All : Replaces all matching text with the specified replace text.","title":"Find/Replace"},{"location":"help/intellisense/","text":"Intellisense # If an XML schema is provided for validation, the same schema is also used to provide intellisense. For example, if your schema defines an <xsd:choice> between the elements \"fruit\", \"vegetable\", and \"berry\", then when you insert a new node at this location, you will be prompted with those choices as shown below: Similarly, if your schema defines a simpleType with a list of <xsd:enumeration> facets, then this list of valid values is prompted when you edit the node value as follows: As you type, the item matching the letters you have typed so far will be automatically selected in the drop-down list. When you press ENTER, the selected item is copied to your edit field, and the intellisense selection is completed, saving you from having to type the whole string in manually. This can result in much more efficient editing of XML documents. XML Notepad also supports special custom editors for well-known data types like date, time and color. See also Schemas Dialog .","title":"Intellisense"},{"location":"help/intellisense/#intellisense","text":"If an XML schema is provided for validation, the same schema is also used to provide intellisense. For example, if your schema defines an <xsd:choice> between the elements \"fruit\", \"vegetable\", and \"berry\", then when you insert a new node at this location, you will be prompted with those choices as shown below: Similarly, if your schema defines a simpleType with a list of <xsd:enumeration> facets, then this list of valid values is prompted when you edit the node value as follows: As you type, the item matching the letters you have typed so far will be automatically selected in the drop-down list. When you press ENTER, the selected item is copied to your edit field, and the intellisense selection is completed, saving you from having to type the whole string in manually. This can result in much more efficient editing of XML documents. XML Notepad also supports special custom editors for well-known data types like date, time and color. See also Schemas Dialog .","title":"Intellisense"},{"location":"help/keyboard/","text":"Keyboard Interface # The keyboard interface has been designed for convenient data entry. The usual sequence when building up an XML fragment is to use INSERT to enter a new node of the same type as the current node, type in its name then hit TAB to enter its value, then repeat this process and soon you will have quickly built up a document from scratch. Handy Keyboard short cuts include: Key Description TAB Navigates from the tree view to the corresponding node value then to the next node in the tree view and so on. SHIFT-TAB does the reverse. Arrow Keys Up/Down/Left/Right navigate the tree view. CTRL+SHIFT+Arrow Nudges the selected node up, down, left or right. HOME/END Navigate to the first and last visible nodes in the tree view. PAGE UP/DOWN Scrolls the tree view up or down one page. INSERT Inserts another node of the same type. CTRL+INSERT Inserts a child element. ALT+INSERT Inserts a child attribute. ENTER Enters and exits edit mode on a node name and/or node value. You can also enter edit mode by just typing in some non-navigational keystrokes and what you type will replace what was selected. CTRL+D Duplicates the current node, so you can quickly create similar fragments of XML and then just edit the values. CTRL+F Brings up the Find dialog . CTRL+H Brings up the Find/Replace dialog . CTRL+I Incremental search - as you type a sequence of letters, this search mode will match the next node that starts with that sequence. The more letters you type the more precise the match becomes. In a large document this is a convenient way to navigate around. CTRL+C, CTRL+V, CTRL+X Cut/Copy/Paste - see Clipboard support . F2 Edit the current node name or value. F3 After dismissing the find dialog, this keystroke repeats the last Find operation. SHIFT+F3 finds in the reverse direction. F6 Move focus to next panel (cycles between tree view, value view and error list). SHIFT+F6 cycles in the reverse order. F4 Move to the next error. SHIFT+ENTER Add a new line to a multi-line node value CTRL+DRAG-DROP Normally drag/drop is a move operation. If you hold down the Control key then it becomes a Copy operation. Multiply (* on number pad) Expand all nodes under the selected node. Add (+ on number pad) Expand the selected node. Subtract (- on number pad) Collapse the selected node.","title":"Keyboard"},{"location":"help/keyboard/#keyboard-interface","text":"The keyboard interface has been designed for convenient data entry. The usual sequence when building up an XML fragment is to use INSERT to enter a new node of the same type as the current node, type in its name then hit TAB to enter its value, then repeat this process and soon you will have quickly built up a document from scratch. Handy Keyboard short cuts include: Key Description TAB Navigates from the tree view to the corresponding node value then to the next node in the tree view and so on. SHIFT-TAB does the reverse. Arrow Keys Up/Down/Left/Right navigate the tree view. CTRL+SHIFT+Arrow Nudges the selected node up, down, left or right. HOME/END Navigate to the first and last visible nodes in the tree view. PAGE UP/DOWN Scrolls the tree view up or down one page. INSERT Inserts another node of the same type. CTRL+INSERT Inserts a child element. ALT+INSERT Inserts a child attribute. ENTER Enters and exits edit mode on a node name and/or node value. You can also enter edit mode by just typing in some non-navigational keystrokes and what you type will replace what was selected. CTRL+D Duplicates the current node, so you can quickly create similar fragments of XML and then just edit the values. CTRL+F Brings up the Find dialog . CTRL+H Brings up the Find/Replace dialog . CTRL+I Incremental search - as you type a sequence of letters, this search mode will match the next node that starts with that sequence. The more letters you type the more precise the match becomes. In a large document this is a convenient way to navigate around. CTRL+C, CTRL+V, CTRL+X Cut/Copy/Paste - see Clipboard support . F2 Edit the current node name or value. F3 After dismissing the find dialog, this keystroke repeats the last Find operation. SHIFT+F3 finds in the reverse direction. F6 Move focus to next panel (cycles between tree view, value view and error list). SHIFT+F6 cycles in the reverse order. F4 Move to the next error. SHIFT+ENTER Add a new line to a multi-line node value CTRL+DRAG-DROP Normally drag/drop is a move operation. If you hold down the Control key then it becomes a Copy operation. Multiply (* on number pad) Expand all nodes under the selected node. Add (+ on number pad) Expand the selected node. Subtract (- on number pad) Collapse the selected node.","title":"Keyboard Interface"},{"location":"help/menus/","text":"Menus # XML Notepad provides the following menu commands. File # The file menu contains the following commands: New: Start a new XML document. Open: Open an XML document for editing. Can also open .csv, .json and .htm files converting them to XML. Reload: Discard any edits you've made and reload the file as it exists on disk. Open Xml Settings...: Opens the current XmlNotepad.settings file in Xml Notepad. Open XmlDiff Styles...: Opens the XmlDiffStyles.css file in your text editor so you can change the appearence of the XmlDiff output window. Delete the file to reset back to the original styles. The files lives in %LOCALAPPDATA%\\Microsoft\\Xml Notepad\\XmlDiffStyles.css. Save: Save any edits you've made to the file disk. Save As: Save the current document to a different file name on disk. Export Errors: Save the contents of the Error List in an XML format. Recent Files: This menu provides quick access to the last 10 XML documents you've edited. Exit: Closes XML Notepad. Edit # The edit menu contains the following commands: Undo: Undo the previous edit operation. Redo: Reverses the last undo operation. Cut: Copy the selected node to the clipboard (and its children) and remove that node from the tree. See Clipboard support . Copy: Copy the selected node to the clipboard (and its children). Copy XPath: Copy the XPath expression that locates the selected node. Paste: Parse the XML in the clipboard and create new nodes in the tree under the selected node. Delete: Delete the selected node. Insert: Insert a new node of the same type (element, attribute, processing instruction, comment, etc) as the currently selected node. This makes it easy to build a list of nodes that have the same type. Rename: Enter edit mode on the current element or attribute so you can rename it (or type Enter key) Duplicate: Clone the selected node (and its children) and insert the clone as the next sibling. Change To: Changes the selected node to the specified node type. Goto Definition: Open the selected XInclude or open the XML Schema that defines the selected node in a new instance of XML Notepad. Expand XIncludes: Expand all XInclude elements with the contents of the XML documents they point to. Nudge: Moves the selected node: Up: Before the previous sibling, or before the parent if there are no previous siblings. Down: After the next sibling, or after the parent if there is no next sibling. Left: Before the parent if this is the first child, otherwise after the parent. Right: so it becomes the last child of the previous sibling. Find...: Brings up the find dialog . Replace...: Brings up the replace dialog . Incremental Search...: Allows you to instantly find what you type. View # Expand All: Expand all collapsed nodes in the entire tree. See \"Expand\" item on the context menu if you just want to expand the selected node. Collapse all: Collapse all expanded nodes in the entire tree (except the root node). See \"Collapse\" item on the context menu if you just want to collapse the selected node. Status Bar: Toggle the visibility of the status bar. Source: Show the current XML document in text form using \"Notepad\". Options...: Display the Options Dialog . Schemas...: Display the Schemas Dialog . Statistics...: Opens a command prompt with the results of running XmlStats.exe on the current file. The XmlStats.exe program is in the current working directory so you can play with it further. Type XmlStats -? for help. Next Error: Navigate to the next error in the list of errors. Compare XML Files...: Launches XML Diff which compares the current document you are editing with another document on disk and displays the results. Insert # Contains commands for inserting various node types. You can insert before, after or as a child of the currently selected node. Only those insert operations that result in well formed document will be enabled. Window # Provides a \"New window\" command for launching another instance of XML Notepad. Help # Bring up the help contents and index as well as the About Dialog.","title":"Menus"},{"location":"help/menus/#menus","text":"XML Notepad provides the following menu commands.","title":"Menus"},{"location":"help/menus/#file","text":"The file menu contains the following commands: New: Start a new XML document. Open: Open an XML document for editing. Can also open .csv, .json and .htm files converting them to XML. Reload: Discard any edits you've made and reload the file as it exists on disk. Open Xml Settings...: Opens the current XmlNotepad.settings file in Xml Notepad. Open XmlDiff Styles...: Opens the XmlDiffStyles.css file in your text editor so you can change the appearence of the XmlDiff output window. Delete the file to reset back to the original styles. The files lives in %LOCALAPPDATA%\\Microsoft\\Xml Notepad\\XmlDiffStyles.css. Save: Save any edits you've made to the file disk. Save As: Save the current document to a different file name on disk. Export Errors: Save the contents of the Error List in an XML format. Recent Files: This menu provides quick access to the last 10 XML documents you've edited. Exit: Closes XML Notepad.","title":"File"},{"location":"help/menus/#edit","text":"The edit menu contains the following commands: Undo: Undo the previous edit operation. Redo: Reverses the last undo operation. Cut: Copy the selected node to the clipboard (and its children) and remove that node from the tree. See Clipboard support . Copy: Copy the selected node to the clipboard (and its children). Copy XPath: Copy the XPath expression that locates the selected node. Paste: Parse the XML in the clipboard and create new nodes in the tree under the selected node. Delete: Delete the selected node. Insert: Insert a new node of the same type (element, attribute, processing instruction, comment, etc) as the currently selected node. This makes it easy to build a list of nodes that have the same type. Rename: Enter edit mode on the current element or attribute so you can rename it (or type Enter key) Duplicate: Clone the selected node (and its children) and insert the clone as the next sibling. Change To: Changes the selected node to the specified node type. Goto Definition: Open the selected XInclude or open the XML Schema that defines the selected node in a new instance of XML Notepad. Expand XIncludes: Expand all XInclude elements with the contents of the XML documents they point to. Nudge: Moves the selected node: Up: Before the previous sibling, or before the parent if there are no previous siblings. Down: After the next sibling, or after the parent if there is no next sibling. Left: Before the parent if this is the first child, otherwise after the parent. Right: so it becomes the last child of the previous sibling. Find...: Brings up the find dialog . Replace...: Brings up the replace dialog . Incremental Search...: Allows you to instantly find what you type.","title":"Edit"},{"location":"help/menus/#view","text":"Expand All: Expand all collapsed nodes in the entire tree. See \"Expand\" item on the context menu if you just want to expand the selected node. Collapse all: Collapse all expanded nodes in the entire tree (except the root node). See \"Collapse\" item on the context menu if you just want to collapse the selected node. Status Bar: Toggle the visibility of the status bar. Source: Show the current XML document in text form using \"Notepad\". Options...: Display the Options Dialog . Schemas...: Display the Schemas Dialog . Statistics...: Opens a command prompt with the results of running XmlStats.exe on the current file. The XmlStats.exe program is in the current working directory so you can play with it further. Type XmlStats -? for help. Next Error: Navigate to the next error in the list of errors. Compare XML Files...: Launches XML Diff which compares the current document you are editing with another document on disk and displays the results.","title":"View"},{"location":"help/menus/#insert","text":"Contains commands for inserting various node types. You can insert before, after or as a child of the currently selected node. Only those insert operations that result in well formed document will be enabled.","title":"Insert"},{"location":"help/menus/#window","text":"Provides a \"New window\" command for launching another instance of XML Notepad.","title":"Window"},{"location":"help/menus/#help","text":"Bring up the help contents and index as well as the About Dialog.","title":"Help"},{"location":"help/options/","text":"Options # The options dialog is available from the \"Options...\" item under the View Menu . See Settings for information on where these settings are stored. Analytics # Options that enable or disable the collection of anonymous app usage information. See Analytics . Color Theme, Colors and Fonts # The options dialog allows you to select a color theme, light or dark, or configure the specific colors used in each type of node as well as the font used and the background color. A drop-down arrow on each color lets you pick from different color palettes. You can also customize the font used in the XML Notepad tree view. Editor # The editor to use if the XML file is invalid and cannot be opened by XML Notepad. You can also disable the \"prompt before reload\" so that if your XML file is changed on disk, it will automatically reload that file (unless you have pending unsaved edits). Formatting # You can also configure the formatting options used when you save an XML file, or turn off formatting altogether. Preserve Whitespace controls how the file is opened; when true, you will see all the whitespace nodes in the document, which are used also when the file is saved. You can also configure the TreeView indentation level in pixels. You can also format attributes so they each have a separate line. Language # Specify which language annotations to pick from associated XSD schemas. Long Lines # How to deal with editing of long lines. Schema Options # Controls whether the tree view shows special information with the nodes in the tree. It will promote the text of the specially named child nodes to the text of the parent node in the tree. Settings Location # Where to store these settings. See Settings for more information. Updates # These settings configure the auto-update mechanism associated with the ClickOnce installer. If the \"Enable updates\" field is true, then XML Notepad will ping the specified \"Update Location\" for an \"Updates.xml\" file to see if a new version of XML Notepad is available. You can set the update frequency, but only if it is more than the update frequency defined in the updates.xml file. See Updates for more information on how this works. Validation # You can turn off DTD validation and you can modify the size of the node line/col index. This limit exists because it takes a lot of extra memory to index the location of every node in a large document and can make editing very large XML files slower. XmlDiff # Options that control how the XmlDiff works when you compare XML documents. XSLT # Options that control how the the XSLT Output works. Set Enable Scripts to false if you don't trust the script code in your XSLT stylesheets. Set the Disable default XSLT to true if you do not want a default XSLT transform on documents that have no <?xml-stylesheet processing instruction. Toggle the Web Browser Version to WebView2 if you have the new WebView2 component installed on your machine. Note: the Preserve Whitespace option can also affect XSLT output.","title":"Options"},{"location":"help/options/#options","text":"The options dialog is available from the \"Options...\" item under the View Menu . See Settings for information on where these settings are stored.","title":"Options"},{"location":"help/options/#analytics","text":"Options that enable or disable the collection of anonymous app usage information. See Analytics .","title":"Analytics"},{"location":"help/options/#color-theme-colors-and-fonts","text":"The options dialog allows you to select a color theme, light or dark, or configure the specific colors used in each type of node as well as the font used and the background color. A drop-down arrow on each color lets you pick from different color palettes. You can also customize the font used in the XML Notepad tree view.","title":"Color Theme, Colors and Fonts"},{"location":"help/options/#editor","text":"The editor to use if the XML file is invalid and cannot be opened by XML Notepad. You can also disable the \"prompt before reload\" so that if your XML file is changed on disk, it will automatically reload that file (unless you have pending unsaved edits).","title":"Editor"},{"location":"help/options/#formatting","text":"You can also configure the formatting options used when you save an XML file, or turn off formatting altogether. Preserve Whitespace controls how the file is opened; when true, you will see all the whitespace nodes in the document, which are used also when the file is saved. You can also configure the TreeView indentation level in pixels. You can also format attributes so they each have a separate line.","title":"Formatting"},{"location":"help/options/#language","text":"Specify which language annotations to pick from associated XSD schemas.","title":"Language"},{"location":"help/options/#long-lines","text":"How to deal with editing of long lines.","title":"Long Lines"},{"location":"help/options/#schema-options","text":"Controls whether the tree view shows special information with the nodes in the tree. It will promote the text of the specially named child nodes to the text of the parent node in the tree.","title":"Schema Options"},{"location":"help/options/#settings-location","text":"Where to store these settings. See Settings for more information.","title":"Settings Location"},{"location":"help/options/#updates","text":"These settings configure the auto-update mechanism associated with the ClickOnce installer. If the \"Enable updates\" field is true, then XML Notepad will ping the specified \"Update Location\" for an \"Updates.xml\" file to see if a new version of XML Notepad is available. You can set the update frequency, but only if it is more than the update frequency defined in the updates.xml file. See Updates for more information on how this works.","title":"Updates"},{"location":"help/options/#validation","text":"You can turn off DTD validation and you can modify the size of the node line/col index. This limit exists because it takes a lot of extra memory to index the location of every node in a large document and can make editing very large XML files slower.","title":"Validation"},{"location":"help/options/#xmldiff","text":"Options that control how the XmlDiff works when you compare XML documents.","title":"XmlDiff"},{"location":"help/options/#xslt","text":"Options that control how the the XSLT Output works. Set Enable Scripts to false if you don't trust the script code in your XSLT stylesheets. Set the Disable default XSLT to true if you do not want a default XSLT transform on documents that have no <?xml-stylesheet processing instruction. Toggle the Web Browser Version to WebView2 if you have the new WebView2 component installed on your machine. Note: the Preserve Whitespace option can also affect XSLT output.","title":"XSLT"},{"location":"help/overview/","text":"User Interface # The interface consists of the following components: See also Keyboard Interface. Menubar # See Menus for a description of each menu. Toolbar # The toolbar provides shortcuts for commonly used menu commands. Hover over the toolbar buttons to see a popup showing the menu command they invoke. Address # Displays the current file being edited. This is also a convenient place to enter an HTTP address for editing an online XML file. XSL Output Tab # The XSLT Output tab contains a web browser-rendered view of the HTML output from an associated XSLT transformation. XSLT transforms are defined when your XML documents contain an xml-stylesheet processing instruction. Node Values # The view on the right shows the text value of the adjacent node in the tree view. For element nodes that have children it shows a light blue band because the text is in the child nodes. Node Names # The TreeView on the left shows the XML document hierarchy in a tree, displaying element, attribute, and processing instructions names as well as standard names for comment, text, CDATA, whitespace, and significant-whitespace nodes. Intellisense # When you have an associated XSD schema, intellisense popups will prompt with expected node names and enumerated node values. XSD Annotations # When you have an associated XSD schema, the xsd:documentation associated with the current node is displayed in a tooltip popup and in the Dynamic help tab. Validation Errors # The Error List at the bottom shows validation errors and warnings. Status Bar # The status bar at the bottom shows various messages indicating the state of the program. Resizers # You can move the resizers to change the ratio of space allocated to each of the main three panels. See also XML Notepad File Association .","title":"Overview"},{"location":"help/overview/#user-interface","text":"The interface consists of the following components: See also Keyboard Interface.","title":"User Interface"},{"location":"help/overview/#menubar","text":"See Menus for a description of each menu.","title":"Menubar"},{"location":"help/overview/#toolbar","text":"The toolbar provides shortcuts for commonly used menu commands. Hover over the toolbar buttons to see a popup showing the menu command they invoke.","title":"Toolbar"},{"location":"help/overview/#address","text":"Displays the current file being edited. This is also a convenient place to enter an HTTP address for editing an online XML file.","title":"Address"},{"location":"help/overview/#xsl-output-tab","text":"The XSLT Output tab contains a web browser-rendered view of the HTML output from an associated XSLT transformation. XSLT transforms are defined when your XML documents contain an xml-stylesheet processing instruction.","title":"XSL Output Tab"},{"location":"help/overview/#node-values","text":"The view on the right shows the text value of the adjacent node in the tree view. For element nodes that have children it shows a light blue band because the text is in the child nodes.","title":"Node Values"},{"location":"help/overview/#node-names","text":"The TreeView on the left shows the XML document hierarchy in a tree, displaying element, attribute, and processing instructions names as well as standard names for comment, text, CDATA, whitespace, and significant-whitespace nodes.","title":"Node Names"},{"location":"help/overview/#intellisense","text":"When you have an associated XSD schema, intellisense popups will prompt with expected node names and enumerated node values.","title":"Intellisense"},{"location":"help/overview/#xsd-annotations","text":"When you have an associated XSD schema, the xsd:documentation associated with the current node is displayed in a tooltip popup and in the Dynamic help tab.","title":"XSD Annotations"},{"location":"help/overview/#validation-errors","text":"The Error List at the bottom shows validation errors and warnings.","title":"Validation Errors"},{"location":"help/overview/#status-bar","text":"The status bar at the bottom shows various messages indicating the state of the program.","title":"Status Bar"},{"location":"help/overview/#resizers","text":"You can move the resizers to change the ratio of space allocated to each of the main three panels. See also XML Notepad File Association .","title":"Resizers"},{"location":"help/schemas/","text":"Schemas # The \"Schemas...\" item under the View Menu brings up the following dialog showing the current set of known XML schemas. These schemas are used for Validation and Intellisense . You can click the browse buttons on the right-hand side to bring up the Open File Dialog to browse for new files, or you can select the \"Add Files\" item in the File Menu to add a batch of schemas. You can click the column headings to sort by that column. The first column contains checkboxes, which can be used to temporarily disable a schema from being used in validation. This list of schemas is persisted in the XmlNotepad.settings file, so it is remembered the next time you load XML Notepad. When you add schemas this way you can create a new document and when you add a new root element you should see some intellisense showing possible root elements and when you select from the dropdown the new element is associated with the correct namespace so that intellisense continues from there. You can also select a row in this dialog and choose File/Generate XML Instance to get a new document that contains a template containing all required elements from the associated schema. If there is more than one top level element in the schema a menu will appear from which you can select the element you would like to start with. See demo video .","title":"Schemas"},{"location":"help/schemas/#schemas","text":"The \"Schemas...\" item under the View Menu brings up the following dialog showing the current set of known XML schemas. These schemas are used for Validation and Intellisense . You can click the browse buttons on the right-hand side to bring up the Open File Dialog to browse for new files, or you can select the \"Add Files\" item in the File Menu to add a batch of schemas. You can click the column headings to sort by that column. The first column contains checkboxes, which can be used to temporarily disable a schema from being used in validation. This list of schemas is persisted in the XmlNotepad.settings file, so it is remembered the next time you load XML Notepad. When you add schemas this way you can create a new document and when you add a new root element you should see some intellisense showing possible root elements and when you select from the dropdown the new element is associated with the correct namespace so that intellisense continues from there. You can also select a row in this dialog and choose File/Generate XML Instance to get a new document that contains a template containing all required elements from the associated schema. If there is more than one top level element in the schema a menu will appear from which you can select the element you would like to start with. See demo video .","title":"Schemas"},{"location":"help/settings/","text":"Settings # XML Notepad stores your user settings in a file located in this folder, by default: %APPDATA%\\Microsoft\\Xml Notepad\\XmlNotepad.settings The settings include the last size and location of the window, a list of most recently opened files, recent find strings, and all the things you see in the Options Dialog . You can change where XML Notepad stores the settings file if you go to the Options Dialog and change the Settings Location option. The options are: Name Location Portable Stored whereever XmlNotepad.exe was installed Local %LOCALAPPDATA%\\Microsoft\\Xml Notepad\\ Roaming %APPDATA%\\Microsoft\\Xml Notepad\\ The Roaming folder might be automatically migrated to all your machines because it is associated with a Roaming User Profile . The Portable option makes it easy for you to xcopy the folder to other machines and get the same settings. This option will not be available if you are running XML Notepad in a folder that is read only (like c:\\Program Files ). Changing the Settings Location option moves the XmlNotepad.settings file accordingly. This means you should not have multiple XmlNotepad.settings files in all these locations, if you do it will search in this priority order: Portable Local Roaming and it will use the first one that it finds. Settings Template # o make it easier to pre-configure XML Notepad across a bunch of machines, you can provide a customized XmlNotepad.template.settings template file next to XmlNotepad.exe and the first time a user launches XmlNotepad on a machine it will use this template for the initial default settings for that user, which is then copied to the Roaming location. See also XML Notepad File Association .","title":"Settings"},{"location":"help/settings/#settings","text":"XML Notepad stores your user settings in a file located in this folder, by default: %APPDATA%\\Microsoft\\Xml Notepad\\XmlNotepad.settings The settings include the last size and location of the window, a list of most recently opened files, recent find strings, and all the things you see in the Options Dialog . You can change where XML Notepad stores the settings file if you go to the Options Dialog and change the Settings Location option. The options are: Name Location Portable Stored whereever XmlNotepad.exe was installed Local %LOCALAPPDATA%\\Microsoft\\Xml Notepad\\ Roaming %APPDATA%\\Microsoft\\Xml Notepad\\ The Roaming folder might be automatically migrated to all your machines because it is associated with a Roaming User Profile . The Portable option makes it easy for you to xcopy the folder to other machines and get the same settings. This option will not be available if you are running XML Notepad in a folder that is read only (like c:\\Program Files ). Changing the Settings Location option moves the XmlNotepad.settings file accordingly. This means you should not have multiple XmlNotepad.settings files in all these locations, if you do it will search in this priority order: Portable Local Roaming and it will use the first one that it finds.","title":"Settings"},{"location":"help/settings/#settings-template","text":"o make it easier to pre-configure XML Notepad across a bunch of machines, you can provide a customized XmlNotepad.template.settings template file next to XmlNotepad.exe and the first time a user launches XmlNotepad on a machine it will use this template for the initial default settings for that user, which is then copied to the Roaming location. See also XML Notepad File Association .","title":"Settings Template"},{"location":"help/updates/","text":"Updates # The Options Dialog can be used to configure how auto-update works in XML Notepad. The Options Dialog points to an Updates.xml file that contains the following kind of information: <application> <title>Microsoft XML Notepad</title> <location>https://lovettsoftwarestorage.blob.core.windows.net/downloads/XmlNotepad/Updates.xml</location> <installer>https://microsoft.github.io/XmlNotepad/#install/</installer> <history>https://github.com/microsoft/XmlNotepad/blob/master/src/Updates/Updates.xml/</history> <frequency>1.00:00:00</frequency> </application> <version number=\"2.8.0.9\"> <bug>Fix locked file bug after doing xml comparison (GitHub issue# 44).</bug> <bug>Fix BOM option so it is honored on XSLT output files also (GitHub issue# 46).</bug> </version> ... This section contains the following information: title - the title of the application being updated. location - this field allows the remote administrator to move where XML Notepad is looking for updates. When XML Notepad discovers a new value here it automatically updates the setting displayed in the options dialog. installer - this field contains the web page location that lists the different XML Notepad installers that can be used to update the app. history - the list that describes all the changes in each version. frequency - how often to ping the updates.xml page for updates. The default is no more than once per day. You can configure the auto-update mechanism using the following settings in the Options Dialog : Enable Updates - if this is false XML Notepad will not ping to see if there are any updates available and the menu item Check for udpates... under the Help menu will be hidden. Update location - which endpoint to use to look for updated updates.xml files. Update frequency - you can edit this field to increase the frequency if you want a larger time span than is specified in the update.xml file. You can add the DisableUpdateUI setting the XmlNotepad.settings file so that users will never see any options regarding auto-updates or the Check for updates... menu item as follows: <DisableUpdateUI>True</DisableUpdateUI> The updates.xml file contains a list of <version number= \"...\"> tags describing the features and bugs fixed in each version of the application. XML Notepad will compare this with the version of the current assembly that is running to see if a newer version is available. If it finds a newer version, XML Notepad displays a button on the right hand side of the main menu bar telling the user that a new version is available. When the user clicks on that button it opens the web browser at the download page so the user can then install the new version. If you are using the \"ClickOnce\" installer then the updates will be automatic so the user will not need to do anything. An updates.xml document is included with the XML Notepad installation containing the version information matching the version of XML Notepad that is currently installed.","title":"Updates"},{"location":"help/updates/#updates","text":"The Options Dialog can be used to configure how auto-update works in XML Notepad. The Options Dialog points to an Updates.xml file that contains the following kind of information: <application> <title>Microsoft XML Notepad</title> <location>https://lovettsoftwarestorage.blob.core.windows.net/downloads/XmlNotepad/Updates.xml</location> <installer>https://microsoft.github.io/XmlNotepad/#install/</installer> <history>https://github.com/microsoft/XmlNotepad/blob/master/src/Updates/Updates.xml/</history> <frequency>1.00:00:00</frequency> </application> <version number=\"2.8.0.9\"> <bug>Fix locked file bug after doing xml comparison (GitHub issue# 44).</bug> <bug>Fix BOM option so it is honored on XSLT output files also (GitHub issue# 46).</bug> </version> ... This section contains the following information: title - the title of the application being updated. location - this field allows the remote administrator to move where XML Notepad is looking for updates. When XML Notepad discovers a new value here it automatically updates the setting displayed in the options dialog. installer - this field contains the web page location that lists the different XML Notepad installers that can be used to update the app. history - the list that describes all the changes in each version. frequency - how often to ping the updates.xml page for updates. The default is no more than once per day. You can configure the auto-update mechanism using the following settings in the Options Dialog : Enable Updates - if this is false XML Notepad will not ping to see if there are any updates available and the menu item Check for udpates... under the Help menu will be hidden. Update location - which endpoint to use to look for updated updates.xml files. Update frequency - you can edit this field to increase the frequency if you want a larger time span than is specified in the update.xml file. You can add the DisableUpdateUI setting the XmlNotepad.settings file so that users will never see any options regarding auto-updates or the Check for updates... menu item as follows: <DisableUpdateUI>True</DisableUpdateUI> The updates.xml file contains a list of <version number= \"...\"> tags describing the features and bugs fixed in each version of the application. XML Notepad will compare this with the version of the current assembly that is running to see if a newer version is available. If it finds a newer version, XML Notepad displays a button on the right hand side of the main menu bar telling the user that a new version is available. When the user clicks on that button it opens the web browser at the download page so the user can then install the new version. If you are using the \"ClickOnce\" installer then the updates will be automatic so the user will not need to do anything. An updates.xml document is included with the XML Notepad installation containing the version information matching the version of XML Notepad that is currently installed.","title":"Updates"},{"location":"help/validation/","text":"Validation # XML Notepad validates your document while you are editing and shows any errors or warnings in the Error List panel. You can double click those errors to navigate to the node in error so you can then fix it. XSD Schemas are located using the standard xsi:schemaLocation and xsi:noNamespaceSchemaLocation attributes where the xsi prefix is bound to the http://www.w3.org/2001/XMLSchema-instance namespace or you can specify schemas using the Schema Dialog . Once a schema is associated with your document you will also get prompted by Intellisense for element and attribute names and values.","title":"Validation"},{"location":"help/validation/#validation","text":"XML Notepad validates your document while you are editing and shows any errors or warnings in the Error List panel. You can double click those errors to navigate to the node in error so you can then fix it. XSD Schemas are located using the standard xsi:schemaLocation and xsi:noNamespaceSchemaLocation attributes where the xsi prefix is bound to the http://www.w3.org/2001/XMLSchema-instance namespace or you can specify schemas using the Schema Dialog . Once a schema is associated with your document you will also get prompted by Intellisense for element and attribute names and values.","title":"Validation"},{"location":"help/xslt/","text":"XSLT Transformation # The XSL Output tab on the main window provides a rendering of the XSLT output from the specified XSLT stylesheet. XSLT stylesheets can be referenced in the XML document using this syntax, as shown in the hamlet.xml sample. <?xml-stylesheet type=\"text/xsl\" href=\"willy.xsl\"?> You can also enter your own XSLT file name on this tab by changing the contents of the XSLT Location field at the top of the XSLT output tab. By default the HTML output is written to the same folder that contains your XML file, but if that folder is not writable it writes to your system %TEMP% folder. You can also customize the default output file name by adding the following additional processing instruction to your XML document: <?xsl-output default=\"hamlet\"?> Then depending on the <?xsl-output method=\"...\" the appropriate file extension will be added. You can also override this by directly editing the Output: text box. If you modify the XML or XSLT file you can press the Transform button to perform another XSLT transformation and the changes will be rendered and saved. This tab supports 2 different web browser engines. The original WinForms web browser and the new Chromium based WebView2. The new WebView2 control is much faster on large XSLT outputs. XML Notepad does not automatically install this new WebView2 component. Please see Microsoft Edge WebView2 for information on how to install this optional component. You will know it is using WebView2 if you see that name mentioned in the status bar. If there is no stylesheet associated with your XML document you will see a default stylesheet that produces an HTML document containing a colorized version of your XML document. This default transform can be disabled in the Options dialog.","title":"Xslt"},{"location":"help/xslt/#xslt-transformation","text":"The XSL Output tab on the main window provides a rendering of the XSLT output from the specified XSLT stylesheet. XSLT stylesheets can be referenced in the XML document using this syntax, as shown in the hamlet.xml sample. <?xml-stylesheet type=\"text/xsl\" href=\"willy.xsl\"?> You can also enter your own XSLT file name on this tab by changing the contents of the XSLT Location field at the top of the XSLT output tab. By default the HTML output is written to the same folder that contains your XML file, but if that folder is not writable it writes to your system %TEMP% folder. You can also customize the default output file name by adding the following additional processing instruction to your XML document: <?xsl-output default=\"hamlet\"?> Then depending on the <?xsl-output method=\"...\" the appropriate file extension will be added. You can also override this by directly editing the Output: text box. If you modify the XML or XSLT file you can press the Transform button to perform another XSLT transformation and the changes will be rendered and saved. This tab supports 2 different web browser engines. The original WinForms web browser and the new Chromium based WebView2. The new WebView2 control is much faster on large XSLT outputs. XML Notepad does not automatically install this new WebView2 component. Please see Microsoft Edge WebView2 for information on how to install this optional component. You will know it is using WebView2 if you see that name mentioned in the status bar. If there is no stylesheet associated with your XML document you will see a default stylesheet that produces an HTML document containing a colorized version of your XML document. This default transform can be disabled in the Options dialog.","title":"XSLT Transformation"}]}